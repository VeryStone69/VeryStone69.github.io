{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["Registration","useState","email","setEmail","password","setPassword","emailDirty","setEmailDirty","passwordDirty","setPasswordDirty","emailError","setEmailError","passwordError","setPasswordError","formValid","setFormValid","blurHandler","e","target","name","useEffect","className","style","color","fontSize","onChange","value","test","String","toLowerCase","emailHandler","onBlur","type","placeholder","passwordHandler","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAiFeA,MA7Ef,WAEA,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA0CN,oBAAS,GAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAoCR,mBAAS,mHAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAA0CV,mBAAS,kJAAnD,mBAAOW,EAAP,KAAsBC,EAAtB,KACA,EAAkCZ,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KAEMC,EAAc,SAACC,GACnB,OAAOA,EAAEC,OAAOC,MACd,IAAK,QACHZ,GAAc,GACd,MACF,IAAK,WACHE,GAAiB,KAiCvB,OA5BAW,qBAAU,WAENL,GADCL,IAAcE,KAKhB,CAACF,EAAYE,IAuBR,qBAAKS,UAAY,MAAjB,SACE,uBAAMA,UAAY,OAAlB,UAEC,8BAAK,sGAEL,sBAAKA,UAAU,WAAf,UACKf,GAAcI,GAAe,sBAAMY,MAAO,CAACC,MAAO,MAAMC,SAAU,IAArC,SAA2Cd,IAC1E,uBAAOe,SAAU,SAAAR,GAAC,OA5BX,SAACA,GACpBd,EAASc,EAAEC,OAAOQ,OACP,wJACJC,KAAKC,OAAOX,EAAEC,OAAOQ,OAAOG,eAGjClB,EAAc,IAFdA,EAAc,kFAwBkBmB,CAAab,IAAIS,MAAQxB,EAAO6B,OAAS,SAAAd,GAAC,OAAID,EAAYC,IAAIe,KAAK,OAAOb,KAAK,QAAQc,YAAY,gHAG3H,sBAAKZ,UAAU,WAAf,UACIb,GAAiBI,GAAkB,sBAAMU,MAAO,CAACC,MAAO,MAAMC,SAAU,IAArC,SAA2CZ,IAChF,uBAAOa,SAAU,SAAAR,GAAC,OAvBR,SAACA,GACvBZ,EAAYY,EAAEC,OAAOQ,OAClBT,EAAEC,OAAOQ,MAAQ,GAAKT,EAAEC,OAAOQ,MAAQ,IACxCb,EAAiB,sNACbI,EAAEC,OAAOQ,OAAOb,EAAiB,mJAErCA,EAAiB,IAiBeqB,CAAgBjB,IAAIS,MAAOtB,EAAU2B,OAAS,SAAAd,GAAC,OAAID,EAAYC,IAAIe,KAAK,WAAWb,KAAK,WAAWc,YAAY,uFAGvI,sBAAKZ,UAAU,SAAf,UACE,8BACA,wBAAQc,UAAWrB,EAAWkB,KAAK,SAAnC,4HAEA,8BACA,wBAAQA,KAAK,SAAb,6DC9DCI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.edc783ce.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport { useState } from 'react';\n\nfunction Registration() {\n\nconst [email, setEmail] = useState('')\nconst [password, setPassword] = useState('')\nconst [emailDirty, setEmailDirty] = useState(false)\nconst [passwordDirty, setPasswordDirty] = useState(false)\nconst [emailError, setEmailError] = useState('Email не может быть пустым')\nconst [passwordError, setPasswordError] = useState('Пароль не может быть пустым')\nconst [formValid, setFormValid] = useState(false)\n\nconst blurHandler = (e) => {\n  switch(e.target.name) {\n    case 'email':\n      setEmailDirty(true)\n      break\n    case 'password':\n      setPasswordDirty(true)\n      break\n  }\n}\n\nuseEffect(() => {\n  if(emailError || passwordError) {\n    setFormValid(false)\n  } else {\n    setFormValid(true)\n  }\n}, [emailError, passwordError])\n\nconst emailHandler = (e) => {\n  setEmail(e.target.value)\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  if(!re.test(String(e.target.value).toLowerCase())) {\n    setEmailError('Некорректный email')\n  } else {\n    setEmailError(\"\")\n  }\n}\n\nconst passwordHandler = (e) => {\n  setPassword(e.target.value)\n  if(e.target.value < 0 || e.target.value > 16) {\n    setPasswordError('Пароль должен состоять не только из цифр')\n    if(!e.target.value){setPasswordError('Пароль не может быть пустым')}\n  } else {\n    setPasswordError('')\n  }\n}\n\nreturn (\n        <div className = 'app'>\n          <form className = 'form'>\n\n           <div><h1>Регистрация</h1></div>\n\n           <div className='itemForm'>\n              {(emailDirty && emailError) && <span style={{color: 'red',fontSize: 13}}>{emailError}</span>}\n              <input onChange={e => emailHandler(e)} value ={email} onBlur= {e => blurHandler(e)} type=\"text\" name='email' placeholder='Введите адрес почты'  />\n            </div>\n\n            <div className='itemForm'>\n              {(passwordDirty && passwordError) && <span style={{color: 'red',fontSize: 13}}>{passwordError}</span>}\n              <input onChange={e => passwordHandler(e)} value={password} onBlur= {e => blurHandler(e)} type=\"password\" name='password' placeholder='Введите пароль' />\n            </div>\n\n            <div className='button'>\n              <div>\n              <button disabled={!formValid} type='submit'>Зарегистрироваться</button>\n              </div>\n              <div>\n              <button type='submit'>Отмена</button></div>\n            </div>\n           </form>\n        </div>\n  )\n\n}\nexport default Registration;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Registration from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Registration />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}